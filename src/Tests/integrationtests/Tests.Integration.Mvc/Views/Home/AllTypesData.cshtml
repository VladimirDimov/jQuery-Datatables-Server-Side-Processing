@{
    ViewBag.Title = "Simple Data";
}

<div id="custom-filters-container">
    <div id="custom-filter-Integer" class="reload-table">
        <span>Integer</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-IntegerNullable" class="reload-table">
        <span>Integer Nullable</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-StringProperty" class="reload-table">
        <span>String</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-CharProperty" class="reload-table">
        <span>CharProperty</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-CharNullable" class="reload-table">
        <span>CharNullable</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-NestedModel-Integer" class="reload-table">
        <span>NestedModel.Integer</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DecimalProperty" class="reload-table">
        <span>DecimalProperty</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DecimalNullable" class="reload-table">
        <span>DecimalNullable</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DoubleProperty" class="reload-table">
        <span>DoubleProperty</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DateTimeProperty" class="reload-table">
        <span>DateTimeProperty</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DateTimeNullable" class="reload-table">
        <span>DateTimeNullable</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DateTimeOffsetProperty" class="reload-table">
        <span>DateTimeOffsetProperty</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>

    <div id="custom-filter-DateTimeOffsetNullable" class="reload-table">
        <span>DateTimeOffsetNullable</span>
        <input data-eq placeholder="eq" />
        <input data-gt placeholder="gt" />
        <input data-gte placeholder="gte" />
        <input data-lt placeholder="lt" />
        <input data-lte placeholder="lte" />
    </div>
</div>

<table id="table-simple">
    <thead>
        <tr>
            @if (ViewBag.ShowString == "true")
            {
            <th>StringProperty</th>
            }
            <th>Integer</th>
            <th>IntegerNullable</th>
            <th>UInt</th>
            <th>UIntNullable</th>

            <th>Long</th>
            <th>LongNullable</th>
            <th>ULong</th>
            <th>ULongNullable</th>

            <th>Short</th>`
            <th>ShortNullable</th>
            <th>UShort</th>
            <th>UShortNullable</th>

            <th>ByteProperty</th>
            <th>ByteNullable</th>
            <th>SByteProperty</th>
            <th>SByteNullable</th>

            <th>DoubleProperty</th>
            <th>DoubleNullable</th>

            <th>DecimalProperty</th>
            <th>DecimalNullable</th>

            <th>DateTimeProperty</th>
            <th>DateTimeNullable</th>
            <th>DateTimeOffsetProperty</th>
            <th>DateTimeOffsetNullable</th>

            <th>BooleanProperty</th>
            <th>BooleanNullable</th>

            @if (ViewBag.ShowChar == "true")
            {
            <th>CharProperty</th>
            <th>CharNullable</th>
            }

            @if (ViewBag.ShowString == "true")
            {
            <th>Nested Model StringProperty</th>
            }
            <th>Nested Model Integer</th>
            <th>Nested Model IntegerNullable</th>
            <th>Nested Model UInt</th>
            <th>Nested Model UIntNullable</th>

            <th>Nested Model Long</th>
            <th>Nested Model LongNullable</th>
            <th>Nested Model ULong</th>
            <th>Nested Model ULongNullable</th>

            <th>Nested Model Short</th>
            <th>Nested Model ShortNullable</th>
            <th>Nested Model UShort</th>
            <th>Nested Model UShortNullable</th>

            <th>Nested Model ByteProperty</th>
            <th>Nested Model ByteNullable</th>
            <th>Nested Model SByteProperty</th>
            <th>Nested Model SByteNullable</th>

            <th>Nested Model DoubleProperty</th>
            <th>Nested Model DoubleNullable</th>

            <th>Nested Model DecimalProperty</th>
            <th>Nested Model DecimalNullable</th>

            <th>Nested Model DateTimeProperty</th>
            <th>Nested Model DateTimeNullable</th>
            <th>Nested Model DateTimeOffsetProperty</th>
            <th>Nested Model DateTimeOffsetNullable</th>

            <th>Nested Model BooleanProperty</th>
            <th>Nested Model BooleanNullable</th>

            @if (ViewBag.ShowChar == "true")
            {
            <th>Nested Model CharProperty</th>
            <th>Nested Model CharNullable</th>
            }
        </tr>
    </thead>
    <tfoot>
        <tr>
            @if (ViewBag.ShowString == "true")
            {
            <th>StringProperty</th>
            }
            <th>Integer</th>
            <th>IntegerNullable</th>
            <th>UInt</th>
            <th>UIntNullable</th>

            <th>Long</th>
            <th>LongNullable</th>
            <th>ULong</th>
            <th>ULongNullable</th>

            <th>Short</th>`
            <th>ShortNullable</th>
            <th>UShort</th>
            <th>UShortNullable</th>

            <th>ByteProperty</th>
            <th>ByteNullable</th>
            <th>SByteProperty</th>
            <th>SByteNullable</th>

            <th>DoubleProperty</th>
            <th>DoubleNullable</th>

            <th>DecimalProperty</th>
            <th>DecimalNullable</th>

            <th>DateTimeProperty</th>
            <th>DateTimeNullable</th>
            <th>DateTimeOffsetProperty</th>
            <th>DateTimeOffsetNullable</th>

            <th>BooleanProperty</th>
            <th>BooleanNullable</th>

            @if (ViewBag.ShowChar == "true")
            {
            <th>CharProperty</th>
            <th>CharNullable</th>
            }

            @if (ViewBag.ShowString == "true")
            {
            <th>Nested Model StringProperty</th>
            }
            <th>Nested Model Integer</th>
            <th>Nested Model IntegerNullable</th>
            <th>Nested Model UInt</th>
            <th>Nested Model UIntNullable</th>

            <th>Nested Model Long</th>
            <th>Nested Model LongNullable</th>
            <th>Nested Model ULong</th>
            <th>Nested Model ULongNullable</th>

            <th>Nested Model Short</th>
            <th>Nested Model ShortNullable</th>
            <th>Nested Model UShort</th>
            <th>Nested Model UShortNullable</th>

            <th>Nested Model ByteProperty</th>
            <th>Nested Model ByteNullable</th>
            <th>Nested Model SByteProperty</th>
            <th>Nested Model SByteNullable</th>

            <th>Nested Model DoubleProperty</th>
            <th>Nested Model DoubleNullable</th>

            <th>Nested Model DecimalProperty</th>
            <th>Nested Model DecimalNullable</th>

            <th>Nested Model DateTimeProperty</th>
            <th>Nested Model DateTimeNullable</th>
            <th>Nested Model DateTimeOffsetProperty</th>
            <th>Nested Model DateTimeOffsetNullable</th>

            <th>Nested Model BooleanProperty</th>
            <th>Nested Model BooleanNullable</th>

            @if (ViewBag.ShowChar == "true")
            {
            <th>Nested Model CharProperty</th>
            <th>Nested Model CharNullable</th>
            }
        </tr>
    </tfoot>
    <tbody></tbody>
</table>

@section Scripts {
    <script>

        function getCustomFilterForColumn(colName) {
            var divSelector = 'div#custom-filter-' + colName;

            return {
                "eq": $(divSelector + ' input[data-eq]').val(),
                "gt": $(divSelector + ' input[data-gt]').val(),
                "gte": $(divSelector + ' input[data-gte]').val(),
                "lt": $(divSelector + ' input[data-lt]').val(),
                "lte": $(divSelector + ' input[data-lte]').val(),
            }
        }

        var table = $('#table-simple').DataTable({
            "paging": @ViewBag.Paging,
            "searching": @ViewBag.Searching,
            "proccessing": true,
            "serverSide": true,
            "ajax": {
                url: "/home/GetData",
                type: 'POST',
                "data": function (d) {
                    d.custom = {
                        "filters": {
                            "Integer": getCustomFilterForColumn('Integer'),
                            "IntegerNullable": getCustomFilterForColumn('IntegerNullable'),
                            "NestedModel.Integer": getCustomFilterForColumn('NestedModel-Integer'),

                            "StringProperty": getCustomFilterForColumn('StringProperty'),

                            "CharProperty": getCustomFilterForColumn('CharProperty'),
                            "CharNullable": getCustomFilterForColumn('CharNullable'),

                            "DecimalProperty": getCustomFilterForColumn('DecimalProperty'),
                            "DecimalNullable": getCustomFilterForColumn('DecimalNullable'),

                            "DoubleProperty": getCustomFilterForColumn('DoubleProperty'),

                            "DateTimeProperty": getCustomFilterForColumn('DateTimeProperty'),
                            "DateTimeNullable": getCustomFilterForColumn('DateTimeNullable'),
                            "DateTimeOffsetProperty": getCustomFilterForColumn('DateTimeOffsetProperty'),
                            "DateTimeOffsetNullable": getCustomFilterForColumn('DateTimeOffsetNullable'),
                        }
                    }
                }
            },
            "columns": [
                @if (ViewBag.ShowString == "true")
                {
                    @:{ "data": "StringProperty" },
                }

                { "data": "Integer", searchable: false },
                { "data": "IntegerNullable", searchable: false },
                { "data": "UInt", searchable: false },
                { "data": "UIntNullable", searchable: false },

                { "data": "Long", searchable: false },
                { "data": "LongNullable", searchable: false },
                { "data": "ULong", searchable: false },
                { "data": "ULongNullable", searchable: false },

                { "data": "Short", searchable: false },
                { "data": "ShortNullable", searchable: false },
                { "data": "UShort", searchable: false },
                { "data": "UShortNullable", searchable: false },

                { "data": "ByteProperty", searchable: false },
                { "data": "ByteNullable", searchable: false },
                { "data": "SByteProperty", searchable: false },
                { "data": "SByteNullable", searchable: false },

                { "data": "DoubleProperty", searchable: false },
                { "data": "DoubleNullable", searchable: false },

                { "data": "DecimalProperty", searchable: false },
                { "data": "DecimalNullable", searchable: false },

                { "data": "@nameof(TestData.Models.AllTypesModel.DateTimeProperty)", searchable: false },
                { "data": "DateTimeNullable", searchable: false },
                { "data": "@nameof(TestData.Models.AllTypesModel.DateTimeOffsetProperty)", searchable: false },
                { "data": "DateTimeOffsetNullable", searchable: false },

                { "data": "BooleanProperty", searchable: false },
                { "data": "BooleanNullable", searchable: false },

                @if (ViewBag.ShowChar == "true")
                {
                    @:{ "data": "CharProperty", searchable: false },
                    @:{ "data": "CharNullable", searchable: false },
                }

                @if (ViewBag.ShowString == "true")
                {
                @:{ "data": "NestedModel.StringProperty", searchable: false },
                }
                { "data": "NestedModel.Integer", searchable: false },
                { "data": "NestedModel.IntegerNullable", searchable: false },
                { "data": "NestedModel.UInt", searchable: false },
                { "data": "NestedModel.UIntNullable", searchable: false },

                { "data": "NestedModel.Long", searchable: false },
                { "data": "NestedModel.LongNullable", searchable: false },
                { "data": "NestedModel.ULong", searchable: false },
                { "data": "NestedModel.ULongNullable", searchable: false },

                { "data": "NestedModel.Short", searchable: false },
                { "data": "NestedModel.ShortNullable", searchable: false },
                { "data": "NestedModel.UShort", searchable: false },
                { "data": "NestedModel.UShortNullable", searchable: false },

                { "data": "NestedModel.ByteProperty", searchable: false },
                { "data": "NestedModel.ByteNullable", searchable: false },
                { "data": "NestedModel.SByteProperty", searchable: false },
                { "data": "NestedModel.SByteNullable", searchable: false },

                { "data": "NestedModel.DoubleProperty", searchable: false },
                { "data": "NestedModel.DoubleNullable", searchable: false },

                { "data": "NestedModel.DecimalProperty", searchable: false },
                { "data": "NestedModel.DecimalNullable", searchable: false },

                { "data": "NestedModel.@nameof(TestData.Models.AllTypesModel.DateTimeProperty)", searchable: false },
                { "data": "NestedModel.DateTimeNullable", searchable: false },
                { "data": "NestedModel.@nameof(TestData.Models.AllTypesModel.DateTimeOffsetProperty)", searchable: false },
                { "data": "NestedModel.DateTimeOffsetNullable", searchable: false },

                { "data": "NestedModel.BooleanProperty", searchable: false },
                { "data": "NestedModel.BooleanNullable", searchable: false },

                @if(ViewBag.ShowChar == "true")
                {
                @:{ "data": "NestedModel.CharProperty", searchable: true },
                @:{ "data": "NestedModel.CharNullable", searchable: true },
                }
            ],
            "columnDefs": [
                {
                    "render": function (data, type, row) {
                        if (!row.DateTimeProperty) {
                            return "";
                        }

                        date = new Date(parseInt(row.DateTimeProperty.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 21
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.DateTimeNullable;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 22
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.DateTimeOffsetProperty;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 23
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.DateTimeOffsetNullable;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 24
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.NestedModel.DateTimeProperty;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 50
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.NestedModel.DateTimeNullable;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 51
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.NestedModel.DateTimeOffsetProperty;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 52
                },

                {
                    "render": function (data, type, row) {
                        var prop = row.NestedModel.DateTimeOffsetNullable;

                        if (!prop) {
                            return "";
                        }

                        date = new Date(parseInt(prop.replace("/Date(", "").replace(")/", ""), 10));

                        return date.toUTCString();
                    },
                    "targets": 53
                },
            ]
        });

        String.prototype.replaceAll = function (search, replacement) {
            var target = this;
            return target.replace(new RegExp(search, 'g'), replacement);
        };

        $('table tfoot th').each(function () {
            var title = $(this).text();
            var formatWhiteSpacesTitle = title.replaceAll(' ', '-');
            $(this).html('<input id="column-search-' + formatWhiteSpacesTitle + '" type="text" placeholder="Search ' + title + '" />');
        });

        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('change', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
            });
        });

        $('.reload-table').on('change', function () {
            table.ajax.reload();
        });
    </script>
}